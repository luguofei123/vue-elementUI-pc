/**
 *   1 常用的元字符
 *   . 匹配除换行符以外的任意字符
 *  \w 匹配字符或数字或下划线或汉字
 *  \s 匹配任意的空白符
 *  \d 匹配数字0-9
 *  \b 匹配单词的开始或结束
 *  ^  匹配字符串的开始
 *  $  匹配字符串的结束
 *  2 常用的限定符
 *  *     重复零次或更多次
 *  +     重复一次货更多次
 *  ？    重复零次或一次
 *  {n}   重复n次
 *  {n,}  重复n次或更多次
 *  {n,m} 重复n次到m次
 *  3 字符类
 *  [] 匹配[]里面的一个字符 如 [0-9]等于\d
 *  4 分支条件
 *  pattern1|pattenr2 匹配是从左到右，如果1满足，则会忽略2
 *  5 分组
 *  (pattern){3} 括号里面的为子表达式，也叫组，匹配3次
 *  6 反义
 *  \W  匹配任意不是字母，数字，下划线，汉字的字符
 *  \S  匹配任意不是空白符的字符
 *  \D  匹配任意非数组的字符
 *  \B  匹配不是单词开头或结束的位置
 *  [^x] 匹配除了x以外的任意字符
 *  7 贪婪与懒惰
 *  贪婪 a.*b 搜索 aabab 将会匹配整个字符串 aabab ，匹配尽可能多的字符叫做贪婪匹配
 *  懒惰 a.*?b 搜索 aabab 将会匹配 aab 和 ab 两个地方
 *
 *  new Regexp('\\w')和 /\w/ 是等价的。
 *
 *  replace(arg1,arg2)
 *  作用对象：字符串 a.replace(/a/gi,'m')
 *  功能：用于替换字符串中的某些字符
 *  参数：arg1 正则表达式
 *        arg2 要替换的字符串 或者 回调函数
 *  返回新的字符串
 *  match(arg)
 *  作用对象：字符串
 *  功能：获取指定的元素内容；
 *  参数：字符串 或者 正则表达式
 *  注：若为正则表达式，g 有很大作用 ；若有 g ，则检索全部；否则，只要获得一个指定的元素，就会停止检索
 *  返回 数组 若只匹配到一项，a.match(/a/) 返回的是 ["a", index: 3, input: "ABCabc", groups: undefined]
 *            若匹配到多于一项  a.match(/a/g) 返回["a", "a"]这样的数组 感觉没用？
 *
 *
 *  test /2/.test(str1)
 *  功能：返回一个boolean值，用于判断字符串中是否含有指定的值
 */

/**
 * 检查输入的字符串是否全部是数字1-9位的自然数
*/
export const NATURALNUMBER = /^(0|[1-9]\d{0,8})$/

/**
 * 检查输入的字符串是否全部是 1-9位正整数
*/
export const POSITIVEINTEGER = /^[1-9]\d{0,8}$/

/**
 * 检查输入的字符串是否整数加小数，其中整数是最多是9位，小数最多2位  
*/
export const FLOAT = /^(0[.]\d{1,2}|\d{1,9}[.]\d{1,2})$/

/**
 * 人民币数字验证
*/
export const MONEY = /(^(0[.]\d{1,2}|\d{1,9}[.]\d{1,2})$)|(^(0|[1-9]\d{0,8})$)/

/**
 * 邮箱验证
*/
export const EMAIL = /^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/

/**
 * 中文字符集
 */
export const CHINESE = /[\u4e00-\u9fa5]/
